{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"./cb461892.js","data":{"isAsync":false}},{"name":"./09e8fbb9.js","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.a = createNonEnumFormatter;\n  exports.c = createFormatter;\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _cb = _$$_REQUIRE(_dependencyMap[3], \"./cb461892.js\");\n\n  var _e8fbb = _$$_REQUIRE(_dependencyMap[4], \"./09e8fbb9.js\");\n\n  var DefaultDateTimeFormatter = function () {\n    function DefaultDateTimeFormatter(config) {\n      (0, _classCallCheck2.default)(this, DefaultDateTimeFormatter);\n      this.config = config, this.type = _e8fbb.F.DateTime;\n    }\n\n    (0, _createClass2.default)(DefaultDateTimeFormatter, [{\n      key: \"format\",\n      value: function format(value) {\n        return !value || isNaN(value.getTime()) ? \"\" : (0, _cb.f)(value, this.config);\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(value, fallbackDate) {\n        if (\"\" === value) return {\n          valid: !0,\n          value: void 0\n        };\n        var result = (0, _cb.p)(value, this.config, fallbackDate);\n        return void 0 === result ? {\n          valid: !1\n        } : {\n          valid: !0,\n          value: result\n        };\n      }\n    }, {\n      key: \"getFormatPlaceholder\",\n      value: function getFormatPlaceholder() {\n        return (0, _cb.E)(this.config);\n      }\n    }, {\n      key: \"withConfig\",\n      value: function withConfig(config) {\n        return new DefaultDateTimeFormatter(config);\n      }\n    }]);\n    return DefaultDateTimeFormatter;\n  }();\n\n  var DefaultEnumFormatter = function () {\n    function DefaultEnumFormatter(universe) {\n      (0, _classCallCheck2.default)(this, DefaultEnumFormatter);\n      this.universe = universe;\n    }\n\n    (0, _createClass2.default)(DefaultEnumFormatter, [{\n      key: \"format\",\n      value: function format(value) {\n        var entry = this.universe.find(function (e) {\n          return e.key === value;\n        });\n        return entry ? entry.caption : value ? value.toString() : \"\";\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(_value) {\n        throw new Error(\"Enumeration values cannot be parsed\");\n      }\n    }]);\n    return DefaultEnumFormatter;\n  }();\n\n  var DefaultNumberFormatter = function () {\n    function DefaultNumberFormatter(config) {\n      (0, _classCallCheck2.default)(this, DefaultNumberFormatter);\n      this.config = config, this.type = _e8fbb.F.Number;\n    }\n\n    (0, _createClass2.default)(DefaultNumberFormatter, [{\n      key: \"format\",\n      value: function format(value) {\n        return value ? (0, _cb.a)(value, this.config.groupDigits, this.config.decimalPrecision) : \"\";\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(inputValue) {\n        if (\"\" === inputValue) return {\n          valid: !0,\n          value: void 0\n        };\n        var result = (0, _cb.b)(inputValue, this.config.decimalPrecision);\n        return void 0 === result ? {\n          valid: !1\n        } : {\n          valid: !0,\n          value: result\n        };\n      }\n    }, {\n      key: \"withConfig\",\n      value: function withConfig(config) {\n        return new DefaultNumberFormatter(config);\n      }\n    }]);\n    return DefaultNumberFormatter;\n  }();\n\n  function createFormatter(entity, attribute, config) {\n    var metaObject = mx.meta.getEntity(entity),\n        attributeType = metaObject.getAttributeType(attribute);\n    return void 0 === attributeType ? {\n      format: function format() {\n        return \"\";\n      },\n      parse: function parse() {\n        throw new Error(\"Cannot parse values for unresolved attribute\");\n      }\n    } : \"Enum\" === attributeType ? new DefaultEnumFormatter(metaObject.getEnumMap(attribute)) : createNonEnumFormatter(attributeType, config);\n  }\n\n  function createNonEnumFormatter(attributeType, config) {\n    var _a, _b;\n\n    switch (attributeType) {\n      case \"DateTime\":\n        return new DefaultDateTimeFormatter(null != (_a = config.dateFormat) ? _a : {\n          type: \"date\"\n        });\n\n      case \"Integer\":\n      case \"Long\":\n      case \"Decimal\":\n        return new DefaultNumberFormatter(null != (_b = config.numberFormat) ? _b : {\n          groupDigits: !1\n        });\n\n      default:\n        return {\n          format: function format(value) {\n            return (0, _cb.D)(value, attributeType);\n          },\n          parse: function parse(inputValue) {\n            var value = (0, _cb.F)(inputValue, attributeType);\n            return void 0 !== value ? {\n              valid: !0,\n              value: value\n            } : {\n              valid: !1\n            };\n          }\n        };\n    }\n  }\n});","map":[[14,0,1,0],[16,0,1,156],[18,6,1,208,"DefaultDateTimeFormatter"],[18,30],[19,0,1,233],[19,38,1,245,"config"],[19,44,1,233],[19,46,1,252],[20,0,1,252],[21,0,1,253],[21,11,1,258,"config"],[21,17,1,253],[21,20,1,265,"config"],[21,26,1,253],[21,28,1,272],[21,33,1,277,"type"],[21,37,1,272],[21,40,1,282,"FormatterType"],[21,49,1,296,"DateTime"],[21,57,1,253],[22,0,1,305],[26,29,1,312,"value"],[26,34],[26,36,1,318],[27,0,1,319],[27,15,1,325],[27,16,1,326,"value"],[27,21,1,325],[27,25,1,333,"isNaN"],[27,30,1,338],[27,31,1,339,"value"],[27,36,1,344],[27,37,1,345,"getTime"],[27,44,1,339],[27,46,1,338],[27,47,1,325],[27,50,1,356],[27,52,1,325],[27,55,1,359],[27,66,1,370,"value"],[27,71,1,359],[27,73,1,376],[27,78,1,381,"config"],[27,84,1,359],[27,85,1,319],[28,0,1,389],[31,28,1,395,"value"],[31,33],[31,35,1,401,"fallbackDate"],[31,47],[31,49,1,414],[32,0,1,415],[32,12,1,418],[32,19,1,423,"value"],[32,24,1,415],[32,26,1,429],[32,33,1,435],[33,0,1,436,"valid"],[33,10,1,436,"valid"],[33,15,1,441],[33,17,1,442],[33,18,1,443],[33,19,1,435],[34,0,1,445,"value"],[34,10,1,445,"value"],[34,15,1,450],[34,17,1,451],[34,22,1,456],[35,0,1,435],[35,9,1,429],[36,0,1,459],[36,12,1,465,"result"],[36,18,1,471],[36,21,1,472],[36,32,1,482,"value"],[36,37,1,472],[36,39,1,488],[36,44,1,493,"config"],[36,50,1,472],[36,52,1,500,"fallbackDate"],[36,64,1,472],[36,65,1,459],[37,0,1,514],[37,15,1,521],[37,20,1,526],[37,21,1,521],[37,26,1,530,"result"],[37,32,1,521],[37,35,1,537],[38,0,1,538,"valid"],[38,10,1,538,"valid"],[38,15,1,543],[38,17,1,544],[38,18,1,545],[39,0,1,537],[39,9,1,521],[39,12,1,548],[40,0,1,549,"valid"],[40,10,1,549,"valid"],[40,15,1,554],[40,17,1,555],[40,18,1,556],[40,19,1,548],[41,0,1,558,"value"],[41,10,1,558,"value"],[41,15,1,563],[41,17,1,564,"result"],[42,0,1,548],[42,9,1,514],[43,0,1,572],[46,45,1,594],[47,0,1,595],[47,15,1,602],[47,26,1,627],[47,31,1,632,"config"],[47,37,1,602],[47,38,1,595],[48,0,1,640],[51,33,1,651,"config"],[51,39],[51,41,1,658],[52,0,1,659],[52,15,1,666],[52,19,1,670,"DefaultDateTimeFormatter"],[52,43,1,666],[52,44,1,695,"config"],[52,50,1,666],[52,51,1,659],[53,0,1,703],[58,6,1,710,"DefaultEnumFormatter"],[58,26],[59,0,1,731],[59,34,1,743,"universe"],[59,42,1,731],[59,44,1,752],[60,0,1,752],[61,0,1,753],[61,11,1,758,"universe"],[61,19,1,753],[61,22,1,767,"universe"],[61,30,1,753],[62,0,1,776],[66,29,1,783,"value"],[66,34],[66,36,1,789],[67,0,1,790],[67,12,1,796,"entry"],[67,17,1,801],[67,20,1,802],[67,25,1,807,"universe"],[67,33,1,802],[67,34,1,816,"find"],[67,38,1,802],[67,39,1,821],[67,49,1,821,"e"],[67,50,1,822],[68,0,1,822],[68,17,1,824,"e"],[68,18,1,825],[68,19,1,826,"key"],[68,22,1,824],[68,27,1,832,"value"],[68,32,1,822],[69,0,1,822],[69,9,1,802],[69,10,1,790],[70,0,1,839],[70,15,1,846,"entry"],[70,20,1,851],[70,23,1,852,"entry"],[70,28,1,857],[70,29,1,858,"caption"],[70,36,1,851],[70,39,1,866,"value"],[70,44,1,871],[70,47,1,872,"value"],[70,52,1,877],[70,53,1,878,"toString"],[70,61,1,872],[70,63,1,871],[70,66,1,889],[70,68,1,839],[71,0,1,892],[74,28,1,898,"_value"],[74,34],[74,36,1,905],[75,0,1,906],[75,14,1,912],[75,18,1,916,"Error"],[75,23,1,912],[75,24,1,922],[75,61,1,912],[75,62,1,906],[76,0,1,961],[81,6,1,968,"DefaultNumberFormatter"],[81,28],[82,0,1,991],[82,36,1,1003,"config"],[82,42,1,991],[82,44,1,1010],[83,0,1,1010],[84,0,1,1011],[84,11,1,1016,"config"],[84,17,1,1011],[84,20,1,1023,"config"],[84,26,1,1011],[84,28,1,1030],[84,33,1,1035,"type"],[84,37,1,1030],[84,40,1,1040,"FormatterType"],[84,49,1,1054,"Number"],[84,55,1,1011],[85,0,1,1061],[89,29,1,1068,"value"],[89,34],[89,36,1,1074],[90,0,1,1075],[90,15,1,1082,"value"],[90,20,1,1087],[90,23,1,1088],[90,34,1,1101,"value"],[90,39,1,1088],[90,41,1,1107],[90,46,1,1112,"config"],[90,52,1,1107],[90,53,1,1119,"groupDigits"],[90,64,1,1088],[90,66,1,1131],[90,71,1,1136,"config"],[90,77,1,1131],[90,78,1,1143,"decimalPrecision"],[90,94,1,1088],[90,95,1,1087],[90,98,1,1161],[90,100,1,1075],[91,0,1,1164],[94,28,1,1170,"inputValue"],[94,38],[94,40,1,1181],[95,0,1,1182],[95,12,1,1185],[95,19,1,1190,"inputValue"],[95,29,1,1182],[95,31,1,1201],[95,38,1,1207],[96,0,1,1208,"valid"],[96,10,1,1208,"valid"],[96,15,1,1213],[96,17,1,1214],[96,18,1,1215],[96,19,1,1207],[97,0,1,1217,"value"],[97,10,1,1217,"value"],[97,15,1,1222],[97,17,1,1223],[97,22,1,1228],[98,0,1,1207],[98,9,1,1201],[99,0,1,1231],[99,12,1,1237,"result"],[99,18,1,1243],[99,21,1,1244],[99,32,1,1256,"inputValue"],[99,42,1,1244],[99,44,1,1267],[99,49,1,1272,"config"],[99,55,1,1267],[99,56,1,1279,"decimalPrecision"],[99,72,1,1244],[99,73,1,1231],[100,0,1,1297],[100,15,1,1304],[100,20,1,1309],[100,21,1,1304],[100,26,1,1313,"result"],[100,32,1,1304],[100,35,1,1320],[101,0,1,1321,"valid"],[101,10,1,1321,"valid"],[101,15,1,1326],[101,17,1,1327],[101,18,1,1328],[102,0,1,1320],[102,9,1,1304],[102,12,1,1331],[103,0,1,1332,"valid"],[103,10,1,1332,"valid"],[103,15,1,1337],[103,17,1,1338],[103,18,1,1339],[103,19,1,1331],[104,0,1,1341,"value"],[104,10,1,1341,"value"],[104,15,1,1346],[104,17,1,1347,"result"],[105,0,1,1331],[105,9,1,1297],[106,0,1,1355],[109,33,1,1366,"config"],[109,39],[109,41,1,1373],[110,0,1,1374],[110,15,1,1381],[110,19,1,1385,"DefaultNumberFormatter"],[110,41,1,1381],[110,42,1,1408,"config"],[110,48,1,1381],[110,49,1,1374],[111,0,1,1416],[116,0,1,1417],[116,11,1,1426,"createFormatter"],[116,26,1,1417],[116,27,1,1442,"entity"],[116,33,1,1417],[116,35,1,1449,"attribute"],[116,44,1,1417],[116,46,1,1459,"config"],[116,52,1,1417],[116,54,1,1466],[117,0,1,1467],[117,8,1,1473,"metaObject"],[117,18,1,1483],[117,21,1,1484,"mx"],[117,23,1,1486],[117,24,1,1487,"meta"],[117,28,1,1484],[117,29,1,1492,"getEntity"],[117,38,1,1484],[117,39,1,1502,"entity"],[117,45,1,1484],[117,46,1,1467],[118,0,1,1467],[118,8,1,1510,"attributeType"],[118,21,1,1523],[118,24,1,1524,"metaObject"],[118,34,1,1534],[118,35,1,1535,"getAttributeType"],[118,51,1,1524],[118,52,1,1552,"attribute"],[118,61,1,1524],[118,62,1,1467],[119,0,1,1563],[119,11,1,1570],[119,16,1,1575],[119,17,1,1570],[119,22,1,1579,"attributeType"],[119,35,1,1570],[119,38,1,1593],[120,0,1,1594,"format"],[120,6,1,1594,"format"],[120,12,1,1600],[120,14,1,1601],[121,0,1,1601],[121,15,1,1605],[121,17,1,1601],[122,0,1,1601],[122,7,1,1593],[123,0,1,1608,"parse"],[123,6,1,1608,"parse"],[123,11,1,1613],[123,13,1,1614],[123,30,1,1618],[124,0,1,1619],[124,14,1,1625],[124,18,1,1629,"Error"],[124,23,1,1625],[124,24,1,1635],[124,70,1,1625],[124,71,1,1619],[125,0,1,1683],[126,0,1,1593],[126,5,1,1570],[126,8,1,1685],[126,19,1,1694,"attributeType"],[126,32,1,1685],[126,35,1,1708],[126,39,1,1712,"DefaultEnumFormatter"],[126,59,1,1708],[126,60,1,1733,"metaObject"],[126,70,1,1743],[126,71,1,1744,"getEnumMap"],[126,81,1,1733],[126,82,1,1755,"attribute"],[126,91,1,1733],[126,92,1,1708],[126,93,1,1685],[126,96,1,1767,"createNonEnumFormatter"],[126,118,1,1789],[126,119,1,1790,"attributeType"],[126,132,1,1789],[126,134,1,1804,"config"],[126,140,1,1789],[126,141,1,1563],[127,0,1,1812],[129,0,1,1812],[129,11,1,1821,"createNonEnumFormatter"],[129,33,1,1812],[129,34,1,1844,"attributeType"],[129,47,1,1812],[129,49,1,1858,"config"],[129,55,1,1812],[129,57,1,1865],[130,0,1,1866],[130,8,1,1870,"_a"],[130,10,1,1866],[130,12,1,1873,"_b"],[130,14,1,1866],[132,0,1,1876],[132,12,1,1883,"attributeType"],[132,25,1,1876],[133,0,1,1898],[133,11,1,1902],[133,21,1,1898],[134,0,1,1913],[134,15,1,1920],[134,19,1,1924,"DefaultDateTimeFormatter"],[134,43,1,1920],[134,44,1,1949],[134,53,1,1956,"_a"],[134,55,1,1958],[134,58,1,1959,"config"],[134,64,1,1965],[134,65,1,1966,"dateFormat"],[134,75,1,1949],[134,79,1,1978,"_a"],[134,81,1,1949],[134,84,1,1981],[135,0,1,1982,"type"],[135,10,1,1982,"type"],[135,14,1,1986],[135,16,1,1987],[136,0,1,1981],[136,9,1,1920],[136,10,1,1913],[138,0,1,1996],[138,11,1,2000],[138,20,1,1996],[139,0,1,2010],[139,11,1,2014],[139,17,1,2010],[140,0,1,2021],[140,11,1,2025],[140,20,1,2021],[141,0,1,2035],[141,15,1,2042],[141,19,1,2046,"DefaultNumberFormatter"],[141,41,1,2042],[141,42,1,2069],[141,51,1,2076,"_b"],[141,53,1,2078],[141,56,1,2079,"config"],[141,62,1,2085],[141,63,1,2086,"numberFormat"],[141,75,1,2069],[141,79,1,2100,"_b"],[141,81,1,2069],[141,84,1,2103],[142,0,1,2104,"groupDigits"],[142,10,1,2104,"groupDigits"],[142,21,1,2115],[142,23,1,2116],[142,24,1,2117],[143,0,1,2103],[143,9,1,2042],[143,10,1,2035],[145,0,1,2121],[146,0,1,2129],[146,15,1,2135],[147,0,1,2136,"format"],[147,10,1,2136,"format"],[147,16,1,2142],[147,18,1,2143],[147,34,1,2143,"value"],[147,39,1,2148],[148,0,1,2148],[148,19,1,2150],[148,30,1,2162,"value"],[148,35,1,2150],[148,37,1,2168,"attributeType"],[148,50,1,2150],[148,51,1,2148],[149,0,1,2148],[149,11,1,2135],[150,0,1,2183,"parse"],[150,10,1,2183,"parse"],[150,15,1,2188],[150,17,1,2189],[150,32,1,2189,"inputValue"],[150,42,1,2199],[150,44,1,2201],[151,0,1,2202],[151,16,1,2208,"value"],[151,21,1,2213],[151,24,1,2214],[151,35,1,2225,"inputValue"],[151,45,1,2214],[151,47,1,2236,"attributeType"],[151,60,1,2214],[151,61,1,2202],[152,0,1,2251],[152,19,1,2258],[152,24,1,2263],[152,25,1,2258],[152,30,1,2267,"value"],[152,35,1,2258],[152,38,1,2273],[153,0,1,2274,"valid"],[153,14,1,2274,"valid"],[153,19,1,2279],[153,21,1,2280],[153,22,1,2281],[153,23,1,2273],[154,0,1,2283,"value"],[154,14,1,2283,"value"],[154,19,1,2288],[154,21,1,2289,"value"],[155,0,1,2273],[155,13,1,2258],[155,16,1,2296],[156,0,1,2297,"valid"],[156,14,1,2297,"valid"],[156,19,1,2302],[156,21,1,2303],[156,22,1,2304],[157,0,1,2296],[157,13,1,2251],[158,0,1,2307],[159,0,1,2135],[159,9,1,2129],[160,0,1,1876],[161,0,1,2310]]},"type":"js/module"}]}