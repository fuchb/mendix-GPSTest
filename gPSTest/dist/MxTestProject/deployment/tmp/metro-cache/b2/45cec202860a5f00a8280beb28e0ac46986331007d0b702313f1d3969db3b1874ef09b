{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"./c132ab4f.js","data":{"isAsync":false}},{"name":"./43297fe2.js","data":{"isAsync":false}},{"name":"./d118a9e5.js","data":{"isAsync":false}},{"name":"./5faea72a.js","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.a = getGuidsFromMicroflowParameters;\n  exports.b = getJavaScriptAction;\n  exports.c = getNanoflow;\n  exports.d = toNanoflowArguments;\n  exports.e = getActionParameters$;\n  exports.g = getNanoflowArguments;\n  exports.t = toMicroflowParameters;\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/regenerator\"));\n\n  var _c132ab4f = _$$_REQUIRE(_dependencyMap[3], \"./c132ab4f.js\");\n\n  _$$_REQUIRE(_dependencyMap[4], \"./43297fe2.js\");\n\n  var _d118a9e = _$$_REQUIRE(_dependencyMap[5], \"./d118a9e5.js\");\n\n  var _faea72a = _$$_REQUIRE(_dependencyMap[6], \"./5faea72a.js\");\n\n  function getNanoflow(nanoflowId) {\n    return nanoflowId();\n  }\n\n  function getJavaScriptAction(jsActionId) {\n    return _regenerator.default.async(function getJavaScriptAction$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", jsActionId());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  function getActionParameters$(argMap, store) {\n    return (0, _c132ab4f.m)(argMap, function (_ref) {\n      var source = _ref.source,\n          widget = _ref.widget;\n      return function (state, source) {\n        if (void 0 === state) return \"selection\" === source ? (0, _d118a9e.a)({\n          objects: []\n        }) : (0, _d118a9e.l)();\n\n        if (Array.isArray(state)) {\n          var objects = (0, _d118a9e.n)((0, _faea72a.f)(state), function (objs) {\n            return objs.map(function (o) {\n              return o.old();\n            });\n          });\n          return (0, _d118a9e.a)({\n            objects: (0, _d118a9e.g)(objects, [])\n          });\n        }\n\n        return (0, _d118a9e.n)(_faea72a.M.fromState$(state), function (obj) {\n          return {\n            object: obj.old()\n          };\n        });\n      }(store.get$(widget, \"allpages\" === source ? \"allGuids\" : source), source);\n    });\n  }\n\n  function toMicroflowParameters(parameters) {\n    var result = {};\n    return Object.keys(parameters).forEach(function (name) {\n      var value = parameters[name];\n      value && (result[name] = \"objects\" in value ? {\n        guids: value.objects.map(function (mxobj) {\n          return mxobj.getGuid();\n        })\n      } : \"object\" in value ? {\n        guid: value.object.getGuid()\n      } : value);\n    }), result;\n  }\n\n  function toNanoflowArguments(parameters) {\n    var result = [];\n    return Object.keys(parameters).forEach(function (name) {\n      var value = parameters[name];\n      result.push({\n        name: name,\n        value: void 0 !== value ? \"object\" in value ? value.object : (0, _c132ab4f.g)() : void 0\n      });\n    }), result;\n  }\n\n  function getNanoflowArguments(nanoflowId, context) {\n    var _getNanoflow, paramsSpec, paramNameToGuids;\n\n    return _regenerator.default.async(function getNanoflowArguments$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _getNanoflow = getNanoflow(nanoflowId), paramsSpec = _getNanoflow.paramsSpec, paramNameToGuids = Object.keys(paramsSpec).map(function (paramName) {\n              var _a;\n\n              return {\n                name: paramName,\n                guid: (_a = context.getContext(paramsSpec[paramName]), null != _a ? _a : void 0)\n              };\n            });\n            return _context3.abrupt(\"return\", function _callee(guids) {\n              return _regenerator.default.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                        mx.data.get({\n                          guids: guids,\n                          callback: resolve,\n                          error: reject\n                        });\n                      }));\n\n                    case 1:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              });\n            }(paramNameToGuids.filter(function (x) {\n              return Boolean(x.guid);\n            }).map(function (x) {\n              return x.guid;\n            })).then(function (allObjects) {\n              return paramNameToGuids.map(function (_ref2) {\n                var paramName = _ref2.name,\n                    guid = _ref2.guid;\n                return {\n                  name: paramName,\n                  value: allObjects.find(function (o) {\n                    return o.getGuid() === guid;\n                  })\n                };\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  }\n\n  function getGuidsFromMicroflowParameters(mfParams) {\n    var mfGuids = [];\n    return Object.values(mfParams).forEach(function (mfParam) {\n      \"guid\" in mfParam ? mfGuids.push(mfParam.guid) : \"guids\" in mfParam && mfGuids.push.apply(mfGuids, (0, _toConsumableArray2.default)(mfParam.guids));\n    }), mfGuids;\n  }\n});","map":[[19,0,1,0],[21,0,1,53],[23,0,1,75],[25,0,1,156],[27,0,1,217],[27,11,1,226,"getNanoflow"],[27,22,1,217],[27,23,1,238,"nanoflowId"],[27,33,1,217],[27,35,1,249],[28,0,1,250],[28,11,1,257,"nanoflowId"],[28,21,1,267],[28,23,1,250],[29,0,1,270],[31,0,1,270],[31,11,1,285,"getJavaScriptAction"],[31,30,1,270],[31,31,1,305,"jsActionId"],[31,41,1,270],[32,0,1,270],[33,0,1,270],[34,0,1,270],[35,0,1,270],[36,0,1,270],[36,45,1,324,"jsActionId"],[36,55,1,334],[36,57,1,270],[38,0,1,270],[39,0,1,270],[40,0,1,270],[41,0,1,270],[42,0,1,270],[43,0,1,270],[44,0,1,270],[46,0,1,337],[46,11,1,346,"getActionParameters$"],[46,31,1,337],[46,32,1,367,"argMap"],[46,38,1,337],[46,40,1,374,"store"],[46,45,1,337],[46,47,1,380],[47,0,1,381],[47,11,1,388],[47,28,1,398,"argMap"],[47,34,1,388],[47,36,1,405],[48,0,1,405],[48,10,1,414,"source"],[48,16,1,405],[48,24,1,407,"source"],[48,30,1,405],[49,0,1,405],[49,10,1,428,"widget"],[49,16,1,405],[49,24,1,421,"widget"],[49,30,1,405],[50,0,1,405],[50,13,1,438],[50,23,1,447,"state"],[50,28,1,438],[50,30,1,453,"source"],[50,36,1,438],[50,38,1,460],[51,0,1,461],[51,12,1,464],[51,17,1,469],[51,18,1,464],[51,23,1,473,"state"],[51,28,1,461],[51,30,1,479],[51,37,1,485],[51,53,1,499,"source"],[51,59,1,485],[51,62,1,506],[51,78,1,516],[52,0,1,517,"objects"],[52,10,1,517,"objects"],[52,17,1,524],[52,19,1,525],[53,0,1,516],[53,9,1,506],[53,10,1,485],[53,13,1,530],[53,30,1,479],[55,0,1,540],[55,12,1,543,"Array"],[55,17,1,548],[55,18,1,549,"isArray"],[55,25,1,543],[55,26,1,557,"state"],[55,31,1,543],[55,32,1,540],[55,34,1,564],[56,0,1,565],[56,14,1,571,"objects"],[56,21,1,578],[56,24,1,579],[56,40,1,584],[56,56,1,598,"state"],[56,61,1,584],[56,62,1,579],[56,64,1,605],[56,74,1,605,"objs"],[56,78,1,609],[57,0,1,609],[57,19,1,611,"objs"],[57,23,1,615],[57,24,1,616,"map"],[57,27,1,611],[57,28,1,620],[57,38,1,620,"o"],[57,39,1,621],[58,0,1,621],[58,21,1,623,"o"],[58,22,1,624],[58,23,1,625,"old"],[58,26,1,623],[58,28,1,621],[59,0,1,621],[59,13,1,611],[59,14,1,609],[60,0,1,609],[60,11,1,579],[60,12,1,565],[61,0,1,633],[61,17,1,640],[61,33,1,650],[62,0,1,651,"objects"],[62,12,1,651,"objects"],[62,19,1,658],[62,21,1,659],[62,37,1,670,"objects"],[62,44,1,659],[62,46,1,678],[62,48,1,659],[63,0,1,650],[63,11,1,640],[63,12,1,633],[64,0,1,684],[66,0,1,684],[66,15,1,691],[66,31,1,696,"MxObject1"],[66,42,1,706,"fromState$"],[66,52,1,696],[66,53,1,717,"state"],[66,58,1,696],[66,59,1,691],[66,61,1,724],[66,71,1,724,"obj"],[66,74,1,727],[67,0,1,727],[67,17,1,730],[68,0,1,731,"object"],[68,12,1,731,"object"],[68,18,1,737],[68,20,1,738,"obj"],[68,23,1,741],[68,24,1,742,"old"],[68,27,1,738],[69,0,1,730],[69,11,1,727],[70,0,1,727],[70,9,1,691],[70,10,1,684],[71,0,1,751],[71,7,1,438],[71,8,1,752,"store"],[71,13,1,757],[71,14,1,758,"get$"],[71,18,1,752],[71,19,1,763,"widget"],[71,25,1,752],[71,27,1,770],[71,42,1,783,"source"],[71,48,1,770],[71,51,1,790],[71,61,1,770],[71,64,1,801,"source"],[71,70,1,752],[71,71,1,438],[71,73,1,809,"source"],[71,79,1,438],[71,80,1,405],[72,0,1,405],[72,5,1,388],[72,6,1,381],[73,0,1,818],[75,0,1,818],[75,11,1,827,"toMicroflowParameters"],[75,32,1,818],[75,33,1,849,"parameters"],[75,43,1,818],[75,45,1,860],[76,0,1,861],[76,8,1,867,"result"],[76,14,1,873],[76,17,1,874],[76,19,1,861],[77,0,1,877],[77,11,1,884,"Object"],[77,17,1,890],[77,18,1,891,"keys"],[77,22,1,884],[77,23,1,896,"parameters"],[77,33,1,884],[77,35,1,908,"forEach"],[77,42,1,884],[77,43,1,916],[77,53,1,916,"name"],[77,57,1,920],[77,59,1,922],[78,0,1,923],[78,10,1,929,"value"],[78,15,1,934],[78,18,1,935,"parameters"],[78,28,1,945],[78,29,1,946,"name"],[78,33,1,945],[78,34,1,923],[79,0,1,952,"value"],[79,6,1,952,"value"],[79,11,1,957],[79,16,1,960,"result"],[79,22,1,966],[79,23,1,967,"name"],[79,27,1,966],[79,28,1,960],[79,31,1,973],[79,44,1,985,"value"],[79,49,1,973],[79,52,1,991],[80,0,1,992,"guids"],[80,8,1,992,"guids"],[80,13,1,997],[80,15,1,998,"value"],[80,20,1,1003],[80,21,1,1004,"objects"],[80,28,1,998],[80,29,1,1012,"map"],[80,32,1,998],[80,33,1,1016],[80,43,1,1016,"mxobj"],[80,48,1,1021],[81,0,1,1021],[81,17,1,1023,"mxobj"],[81,22,1,1028],[81,23,1,1029,"getGuid"],[81,30,1,1023],[81,32,1,1021],[82,0,1,1021],[82,9,1,998],[83,0,1,991],[83,7,1,973],[83,10,1,1041],[83,22,1,1052,"value"],[83,27,1,1041],[83,30,1,1058],[84,0,1,1059,"guid"],[84,8,1,1059,"guid"],[84,12,1,1063],[84,14,1,1064,"value"],[84,19,1,1069],[84,20,1,1070,"object"],[84,26,1,1064],[84,27,1,1077,"getGuid"],[84,34,1,1064],[85,0,1,1058],[85,7,1,1041],[85,10,1,1088,"value"],[85,15,1,957],[85,16,1,952],[86,0,1,1095],[86,5,1,884],[86,8,1,1097,"result"],[86,14,1,877],[87,0,1,1104],[89,0,1,1104],[89,11,1,1113,"toNanoflowArguments"],[89,30,1,1104],[89,31,1,1133,"parameters"],[89,41,1,1104],[89,43,1,1144],[90,0,1,1145],[90,8,1,1151,"result"],[90,14,1,1157],[90,17,1,1158],[90,19,1,1145],[91,0,1,1161],[91,11,1,1168,"Object"],[91,17,1,1174],[91,18,1,1175,"keys"],[91,22,1,1168],[91,23,1,1180,"parameters"],[91,33,1,1168],[91,35,1,1192,"forEach"],[91,42,1,1168],[91,43,1,1200],[91,53,1,1200,"name"],[91,57,1,1204],[91,59,1,1206],[92,0,1,1207],[92,10,1,1213,"value"],[92,15,1,1218],[92,18,1,1219,"parameters"],[92,28,1,1229],[92,29,1,1230,"name"],[92,33,1,1229],[92,34,1,1207],[93,0,1,1236,"result"],[93,6,1,1236,"result"],[93,12,1,1242],[93,13,1,1243,"push"],[93,17,1,1236],[93,18,1,1248],[94,0,1,1249,"name"],[94,8,1,1249,"name"],[94,12,1,1253],[94,14,1,1254,"name"],[94,18,1,1248],[95,0,1,1259,"value"],[95,8,1,1259,"value"],[95,13,1,1264],[95,15,1,1265],[95,20,1,1270],[95,21,1,1265],[95,26,1,1274,"value"],[95,31,1,1265],[95,34,1,1280],[95,46,1,1291,"value"],[95,51,1,1280],[95,54,1,1297,"value"],[95,59,1,1302],[95,60,1,1303,"object"],[95,66,1,1280],[95,69,1,1310],[95,87,1,1265],[95,90,1,1318],[95,95,1,1323],[96,0,1,1248],[96,7,1,1236],[97,0,1,1327],[97,5,1,1168],[97,8,1,1329,"result"],[97,14,1,1161],[98,0,1,1336],[100,0,1,1336],[100,11,1,1351,"getNanoflowArguments"],[100,31,1,1336],[100,32,1,1372,"nanoflowId"],[100,42,1,1336],[100,44,1,1383,"context"],[100,51,1,1336],[101,0,1,1336],[103,0,1,1336],[104,0,1,1336],[105,0,1,1336],[106,0,1,1336],[107,0,1,1336],[107,27,1,1421,"getNanoflow"],[107,38,1,1432],[107,39,1,1433,"nanoflowId"],[107,49,1,1432],[107,50,1,1336],[107,52,1,1409,"paramsSpec"],[107,62,1,1336],[107,78,1,1398,"paramsSpec"],[107,88,1,1336],[107,90,1,1445,"paramNameToGuids"],[107,106,1,1336],[107,109,1,1462,"Object"],[107,115,1,1468],[107,116,1,1469,"keys"],[107,120,1,1462],[107,121,1,1474,"paramsSpec"],[107,131,1,1462],[107,133,1,1486,"map"],[107,136,1,1462],[107,137,1,1490],[107,147,1,1490,"paramName"],[107,156,1,1499],[107,158,1,1501],[108,0,1,1502],[108,18,1,1506,"_a"],[108,20,1,1502],[110,0,1,1509],[110,21,1,1515],[111,0,1,1516,"name"],[111,16,1,1516,"name"],[111,20,1,1520],[111,22,1,1521,"paramName"],[111,31,1,1515],[112,0,1,1531,"guid"],[112,16,1,1531,"guid"],[112,20,1,1535],[112,23,1,1537,"_a"],[112,25,1,1539],[112,28,1,1540,"context"],[112,35,1,1547],[112,36,1,1548,"getContext"],[112,46,1,1540],[112,47,1,1559,"paramsSpec"],[112,57,1,1569],[112,58,1,1570,"paramName"],[112,67,1,1569],[112,68,1,1540],[112,69,1,1537],[112,71,1,1582],[112,79,1,1588,"_a"],[112,81,1,1582],[112,84,1,1591,"_a"],[112,86,1,1582],[112,89,1,1594],[112,94,1,1599],[112,95,1,1535],[113,0,1,1515],[113,15,1,1509],[114,0,1,1603],[114,13,1,1462],[114,14,1,1336],[115,0,1,1336],[115,46,1,1612],[115,63,1,1627,"guids"],[115,68,1,1612],[116,0,1,1612],[117,0,1,1612],[118,0,1,1612],[119,0,1,1612],[120,0,1,1612],[120,56,1,1641],[120,60,1,1645,"Promise"],[120,67,1,1641],[120,68,1,1653],[120,78,1,1654,"resolve"],[120,85,1,1653],[120,87,1,1662,"reject"],[120,93,1,1653],[120,95,1,1671],[121,0,1,1672,"mx"],[121,24,1,1672,"mx"],[121,26,1,1674],[121,27,1,1675,"data"],[121,31,1,1672],[121,32,1,1680,"get"],[121,35,1,1672],[121,36,1,1684],[122,0,1,1685,"guids"],[122,26,1,1685,"guids"],[122,31,1,1690],[122,33,1,1691,"guids"],[122,38,1,1684],[123,0,1,1697,"callback"],[123,26,1,1697,"callback"],[123,34,1,1705],[123,36,1,1706,"resolve"],[123,43,1,1684],[124,0,1,1714,"error"],[124,26,1,1714,"error"],[124,31,1,1719],[124,33,1,1720,"reject"],[125,0,1,1684],[125,25,1,1672],[126,0,1,1729],[126,23,1,1641],[126,24,1,1612],[128,0,1,1612],[129,0,1,1612],[130,0,1,1612],[131,0,1,1612],[132,0,1,1612],[133,0,1,1612],[134,0,1,1612],[134,14,1,1732,"paramNameToGuids"],[134,30,1,1748],[134,31,1,1749,"filter"],[134,37,1,1732],[134,38,1,1756],[134,48,1,1756,"x"],[134,49,1,1757],[135,0,1,1757],[135,21,1,1759,"Boolean"],[135,28,1,1766],[135,29,1,1767,"x"],[135,30,1,1768],[135,31,1,1769,"guid"],[135,35,1,1766],[135,36,1,1757],[136,0,1,1757],[136,13,1,1732],[136,15,1,1776,"map"],[136,18,1,1732],[136,19,1,1780],[136,29,1,1780,"x"],[136,30,1,1781],[137,0,1,1781],[137,21,1,1783,"x"],[137,22,1,1784],[137,23,1,1785,"guid"],[137,27,1,1781],[138,0,1,1781],[138,13,1,1732],[138,14,1,1612],[138,16,1,1792,"then"],[138,20,1,1612],[138,21,1,1797],[138,31,1,1797,"allObjects"],[138,41,1,1807],[139,0,1,1807],[139,21,1,1809,"paramNameToGuids"],[139,37,1,1825],[139,38,1,1826,"map"],[139,41,1,1809],[139,42,1,1830],[140,0,1,1830],[140,20,1,1837,"paramName"],[140,29,1,1830],[140,38,1,1832,"name"],[140,42,1,1830],[141,0,1,1830],[141,20,1,1852,"guid"],[141,24,1,1830],[141,33,1,1847,"guid"],[141,37,1,1830],[142,0,1,1830],[142,23,1,1861],[143,0,1,1862,"name"],[143,18,1,1862,"name"],[143,22,1,1866],[143,24,1,1867,"paramName"],[143,33,1,1861],[144,0,1,1877,"value"],[144,18,1,1877,"value"],[144,23,1,1882],[144,25,1,1883,"allObjects"],[144,35,1,1893],[144,36,1,1894,"find"],[144,40,1,1883],[144,41,1,1899],[144,51,1,1899,"o"],[144,52,1,1900],[145,0,1,1900],[145,27,1,1902,"o"],[145,28,1,1903],[145,29,1,1904,"getGuid"],[145,36,1,1902],[145,43,1,1916,"guid"],[145,47,1,1900],[146,0,1,1900],[146,19,1,1883],[147,0,1,1861],[147,17,1,1830],[148,0,1,1830],[148,15,1,1809],[148,16,1,1807],[149,0,1,1807],[149,13,1,1612],[149,14,1,1336],[151,0,1,1336],[152,0,1,1336],[153,0,1,1336],[154,0,1,1336],[155,0,1,1336],[156,0,1,1336],[157,0,1,1336],[159,0,1,1926],[159,11,1,1935,"getGuidsFromMicroflowParameters"],[159,42,1,1926],[159,43,1,1967,"mfParams"],[159,51,1,1926],[159,53,1,1976],[160,0,1,1977],[160,8,1,1983,"mfGuids"],[160,15,1,1990],[160,18,1,1991],[160,20,1,1977],[161,0,1,1994],[161,11,1,2001,"Object"],[161,17,1,2007],[161,18,1,2008,"values"],[161,24,1,2001],[161,25,1,2015,"mfParams"],[161,33,1,2001],[161,35,1,2025,"forEach"],[161,42,1,2001],[161,43,1,2033],[161,53,1,2033,"mfParam"],[161,60,1,2040],[161,62,1,2042],[162,0,1,2043],[162,16,1,2052,"mfParam"],[162,23,1,2043],[162,26,1,2060,"mfGuids"],[162,33,1,2067],[162,34,1,2068,"push"],[162,38,1,2060],[162,39,1,2073,"mfParam"],[162,46,1,2080],[162,47,1,2081,"guid"],[162,51,1,2060],[162,52,1,2043],[162,55,1,2087],[162,66,1,2097,"mfParam"],[162,73,1,2087],[162,77,1,2106,"mfGuids"],[162,84,1,2113],[162,85,1,2114,"push"],[162,89,1,2106],[162,96,1,2106,"mfGuids"],[162,103,1,2113],[162,138,1,2122,"mfParam"],[162,145,1,2129],[162,146,1,2130,"guids"],[162,151,1,2113],[162,153,1,2043],[163,0,1,2137],[163,5,1,2001],[163,8,1,2139,"mfGuids"],[163,15,1,1994],[164,0,1,2147]]},"type":"js/module"}]}